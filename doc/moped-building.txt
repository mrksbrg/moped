Here some configuring is described, then the building, and then
some testing.


Building:

    A cross compiler is needed, arm-none-eabi. I got a copy from Avenir.
    See http://elinux.org/ARMCompilers
    I don't know how to get a new, free, one.
I think the above is incorrect - it may be the IDE that's nonfree.

You may need to install gawk.


make sure that Java is 1.7 or later, both when building and running:
java -version
javac -version
If it isn't, setting JAVA_HOME alone may not work; use
update-alternatives --config java
Whether everything works with 1.8, I don't know.


sudo apt-get install git
sudo apt-get install maven


git clone https://github.com/sics-sse/moped


In new-server/src/main/java/service/PluginWebServicePublisher.java,
change the value of PUB_ADDRESS to use the computer's domain name
instead, if you want the server to be reachable from outside.

In configs/system1.xml, change
			<ip>localhost</ip>
appropriately, if you did the corresponding change for the server
(in PluginWebServicePublisher.java).


In webportal/wordpress/custom/vehicle.php,
modify
 	$webServiceAddress = "http://localhost:9990/moped/pws?wsdl";
if the server is not running on the same host as the web server.


Maybe relevant note, for pom.xml in new-server:
org.json is compiled with Java 8 in its latest version,
			<version>20141113</version>
so we use 20140107



Be sure that the "moped" top directory is your current directory.

Modify the setting for CODEBENCH in new-server/misc/buildall.sh
Run buildall.sh

If there is any error, the script will abort at that step.


If the compilation is interrupted in the middle of bld.sh in squawk,
there is then no functioning builder, and then d.sh doesn't
function. If that happens, first build 'builder' explicitly with
bld.sh.


If you are running a 64 bit Linux, you may need to install software to
make it possible to run 32-bit programs (like
squawk/tools/linux-x86/preverify). Googling for "run 32 bit on 64 bit linux"
will bring up something useful.


Read moped-mysql.txt.

* Testing the server

cd server
java -jar target/server.jar



The server should start, and say "published" when it's ready to receive
web service calls.

If it says

    java.sql.SQLException: Access denied for user 'fresta'@'localhost'
or
    DB ERROR 0
    Communications link failure

the local mysql wasn't started or the server doesn't have the right
access.


* Testing the simulator

(The server from the step above should still be running.)

cd simulator

java -jar target/simulator-1.0.jar
    Connected to trusted server
    Opening a session to localhost/127.0.0.1:9999 from vin:20UYA31581L000000
    Local session address: /127.0.0.1:60570

and the server says
    Message received on server...
    Vehicle 20UYA31581L000000 joins the connection (simulator 1)
It will say (simulator 0) for an actual model car.

A window appears, and a small drawing of a car.

* Testing the remote control

Server and simulator from the steps above should still be running.

If you already built the Android app:

Start the WirelessIno app on your Android. Under the settings, set the
correct host address of the car (i.e., simulator), and fill in the
port number 9000 that is suggested. Press Connect and it should say
Connected. Use the controls to set speed and angle, and see that the
car moves in the simulator. They revert to zero when let go.

* Testing the web service interface to the server

Fetch a simple SOAP client for Python:
https://fedorahosted.org/suds/wiki/Documentation
Install using "python setup.py install"

cd new-server/misc

Start python, and do
    from suds.client import Client
    url='http://localhost:9990/moped/pws?wsdl'
    client = Client(url)
    client.options.cache.clear()
    s = client.service

Test the server:
    import testmoped
    testmoped.uploadplus(s, "UltraSonicReader", "1.0")
{"result":506,"error":false}
    s.installApp("21UYA31581L000000", 506)
{"message":"no connection with car 21UYA31581L000000","result":{},"error":true}



TODO: insert the rest of the testing from how-to-build.txt





* Installing the software on a car

Get three SD cards, call them TCU, SCU and VCU. Make empty file systems
on SCU and VCU.

On the TCU, put a Linux. For example, fetch a 4.1 image from
https://www.raspberrypi.org/downloads/raspbian/ and put it on the card
with the 'dd' program.

See https://www.raspbian.org,
https://www.raspberrypi.org
https://moped.sics.se/?page_id=328
http://elinux.org/RPi_CANBus
NOOBS, raspbian

Add these lines to /boot/config.txt
# Arndt: added (see http://skpang.co.uk/blog/archives/1165)
dtparam=spi=on 
dtoverlay=mcp2515-can0-overlay,oscillator=20000000,interrupt=25 
dtoverlay=spi-bcm2835-overlay


Then create a directory structure
 ~pi
     can-utils
         java

Under "java", put ecm-linux/target/ecm-linux-0.0.1-SNAPSHOT.jar.

Copy ecm-linux/apptest.c and apptest.h to "can-utils". And canConfig.xml
Copy ecm-linux/javaCanLib.c to "java".

Create a script can-utils/setup.sh with the following contents:
insmod spi-bcm2708.ko
insmod can.ko
insmod can-dev.ko
insmod can-raw.ko
insmod can-bcm.ko
insmod mcp251x.ko
ip link set can0 up type can bitrate 500000


Find the *.ko files mentioned above somewhere under /lib/modules/*/kernel
and copy them to ~pi/can-utils.
This and the insmod may be unnecessary for some or all of them.

Create a script java/deployJavaCanLib.sh with the following contents:

gcc -c -Wall -Werror -fpic javaCanLib.c ../apptest.c
gcc -shared -o libjavaCanLib.so javaCanLib.o apptest.o
sudo cp libjavaCanLib.so /lib
java -jar ecm-linux/target/ecm-linux-0.0.1-SNAPSHOT.jar

Arrange for it to be run when Linux boots: add this to /etc/rc.local
cd /home/pi/can-utils
sudo ./setup.sh
cd java
./deployJavaCanLib.sh &

You may have to use
    sudo raspi-config
to enable SPI and/or CAN at boot time.



Create a file java/settings.properties with the following contents:

LOCAL_PORT=8888
VIN=20UYA31581L000000
SERVER=appz-ext.sics.se
SERVER_PORT=9999
# port that is used to AUTOSAR
LINUX_AUTOSAR_PORT=50000
APP_DIR=apps

Use the actual name of the computer where you run the server.
Change VIN to something else.

In /etc/wpa_supplicant/wpa_supplicant.conf, add the name and password
of the network defined by the router (internet access point), in a structure
like this:
network={
	ssid="network name"
	psk="password"
	key_mgmt=WPA-PSK
	proto=WPA2
	pairwise=CCMP
	group=CCMP
}



To VCU and SCU, copy autosar/boot/bootcode.bin and start.elf.
Copy autosar/SCU/SCU-kernel.img to kernel.img on the SCU card.
Copy autosar/VCU/VCU-kernel.img to kernel.img on the VCU card.

See also moped/autosar/readme.txt

Insert the cards in the respective slots on the car.
Turn the car on.

After a while (about one minute), the server should say that a car has
connected.
