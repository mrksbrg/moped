* Speeding up building server

Extract all maven repository files (in ~/.m2) to ~/jar-files
Then run original-server:
Delete our own jar files: server, ecm*, simulator
and there are three log4j, where only one is needed
java -cp ~/jar-files/'*':target/server.jar service.PluginWebServicePublisher
Remove the shade thing in pom.xml and the building takes half the time.
add this to how-to-build.txt

mvn clean package -Dmaven.test.skip=true

* Add the local network on TCU

(after setting up one, using Internet shared surf point, or something)
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf


* settings.properties on TCU

Change
SERVER=appz-ext.sics.se


============================================================

indoor positioning system

with the camera and opencv

on TCU

TODO: copy text from LOG-camera

============================================================

MQTT

The SCU writes to a port, which sends the data to TCU, which sends it
out (publishes).

The address of the MQTT server is set in ecm-linux/.../Main.java and
simulator/.../CarFactory.java.

A template is also defined there, which consists of a JSON structure. It
is filled in with the key and value of what is written to the part in
the form "key|value".

============================================================

VCU and SCU have numbers: 2 = VCU and 3 = SCU. When relevant, 1 = TCU.

============================================================

Tips and tricks

If only the SCU (or VCU) needs to be restarted (because it got stuck,
or because its SD card needs to be updated), pull its power cable and
put it in again.

If you put an ssh app on the Android, you can log in to the TCU without
a cable. Otherwise, you can use an ethernet cable from the TCU to your
computer.

When doing file operations on the TCU and then restarting the car, the
operations sometimes turn out to be undone. I think it's important
to do "sync" before restarting.

The dependencies within the modules are far from understood, so it's
best to always (yes, always) do a 'clean' operation before rebuilding.

============================================================

If squawk is rebuilt, and a new kernel.img put on an ECU, all plugins
for that ECU need to be rebuilt, since their "hash codes" need to
coincide.

============================================================

When debugging the code on an ECU, printouts are normally not harmful,
but if they are performed very fast (deep inside the runtime system),
or in a sensitive place where they themselves may cause recursion
(memory allocation, symbol lookup), they may either hang the ECU
completely or make it behave erratically.

At least for the communication between TCU and SCU/VCU, timing cannot
be changed completely arbitrarily, because there is no flow control between
PIRTE and the code transferring data from the CAN bus.

In Java, printing is done with VM.print or VM.println, whereas System.out
is ignored on autosar. The VM functions work on hosted platforms too,
though.

============================================================

Time taken to get the car started:

0  boot
33 TCU gets a wifi address (the dongle starts blinking in blue)
34 ECM starts
56 ECM connects to the server
68 SCU or VCU receives the first plugin (if the TCU has one)
78 (if the plugin is 2400 bytes) the first plugin starts running

============================================================

Useful commands on TCU:

gpio readall (displays the layout of the pins)
candump -td can0 (shows the CAN traffic)


============================================================

New things, which have not been put in their proper place in this
documentation:

I added a 4x7 LED display (7 segments, and actually a period too), which
uses I2C. SCU has code I2C, and otherwise uses this for the ADC. It's
probably possible to put both ADC and the display on the same I2C pins,
after setting a different device id on the display.

The MPU9150 (accelerometer) unit also has a magnetometer, so one can
get the orientation with some additional code on the SCU.

The best current CAN behaviour is had with the 4.1.7+ kernel, which needs
only a little configuration to work. We can probably build it, but I have
only tried a downloaded SD card image. Then, the CAN problems on the TCU
are gone.

CAN problems on the ECU's are in the process of being fixed. A remaining
one is that the CAN reading doesn't seem to make proper use of the second buffer
in the CAN controller, so that if two sources send a stream of messages
each with 20 ms intervals, messages are lost if they streams are not nearly
10 ms from each other.

I added code for reading the value of the GPIO 2 pin (pin 3). This can be
changed from 1 to 0 with a simple switch which grounds the pin. The code
is not readable from Java yet.

New plugin: StarAndGo

Did I write about the ACT LED blinking code?

Sound: connected a small loudspeaker with 3.5mm audio and USB power (to
charge internal battery) to TCU.

Sending data from VCU to SCU (in the same way as SCU to VCU already works)
is in progress, but not ready yet.
