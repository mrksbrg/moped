
When all the parts are up and running and connected, it looks like this:

GUI
 an Apache server, with Wordpress, and a mysql database

server
 also uses a mysql database

simulator

GtkTerm
 a terminal emulator for looking at serial traffic, running on a computer

Android remote control

Smart phone (Android or IPhone) shared internet point = router

car

keyboard

screen

Cables between some of the parts:
 from car (UART to USB) to GtkTerm
 from car (USB port) to keyboard
 from car (video port) to screen
 from car (ethernet port) to computer

Internet access for connecting the router to the server.



The two smart phone functions may be realised on the same phone. The
functions on computers may be realised on the same computer, or
different ones.

You may also want to use an ssh app on the Android to connect
interactively to the car.



On the car are three Raspberry Pi boards, each with one SD card. One
of them handles all external communication and is called the TCU and
runs Linux.  The other two handles the local sensors and actuators and
run the operating system autosar. They are called VCU and SCU. See
moped-car.txt for specific details.

The code running on the TCU is a Java program called ECM, which uses C code
compiled into a sharable library libjavaCanBus.so for the communication
with SCU and VCU (over what is called the CAN bus).

The TCU code consists of the ecm-core and ecm-linux modules.

The code running on the SCU and VCU is the autosar operating system,
with a Java runtime system added.
The modules squawk and autosar are built, and a file kernel.img is
produced, which is put on the SD card.

The simulator module simulates a car. It reimplements parts from ecm-linux
and squawk, and uses ecm-core. It doesn't attempt to simulate the autosar
structure, and doesn't implement all sensors and actuators.
See moped-simulator.txt



The SCU and VCU run so-called plugins, which are written in Java. When
a plugin has been built, it is uploaded to the server. Then a car is
selected and the plugin installed on it. When the plugin is installed
on the car, it first comes to the TCU, which stores it in its file
system and sends it on to which one of the VCU and SCU that should
have it. When the plugin arrives in the VCU (say), the VCU starts
executing it. If it stops (whether crashing or normally), it is not
restarted automatically - nor is it if the VCU is restarted. If the
whole car is restarted, the TCU sends its plugins again to the VCU or SCU.

A plugin may be uninstalled, in which it is removed from the TCU, and stopped
on the VCU, if running.

The upload, installation etc. operations can be done with a GUI which sends
requests to the server, or by sending requests directly to the server using
a web service interface. See moped-server-api.txt.

The VCU and SCU can communicate with each other (for example one
plugin on VCU using the distance read on SCU to affect the driving),
and also send data to the TCU for publication using MQTT.

The flow of information between TCU and server is currently in a state
of flux, so is not described in detail here. The intent is that when a
car is restarted, it should ask the server for new things to be
installed.


--------------------------------------------------
Additional documentation apart from these files:

https://twiki.sics.se/bin/view/FRESTA/MOPED
https://twiki.sics.se/bin/view/FRESTA/DocumentationOnTheSimulator
https://twiki.sics.se/bin/view/FRESTA/TechnicalReferences#AutoSAR

moped/doc/PluginManual.docx
